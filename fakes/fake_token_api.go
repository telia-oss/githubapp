// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"context"
	"sync"

	"github.com/google/go-github/v29/github"
	"github.com/telia-oss/githubapp"
)

type FakeAppsTokenAPI struct {
	ListReposStub        func(context.Context, *github.ListOptions) ([]*github.Repository, *github.Response, error)
	listReposMutex       sync.RWMutex
	listReposArgsForCall []struct {
		arg1 context.Context
		arg2 *github.ListOptions
	}
	listReposReturns struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}
	listReposReturnsOnCall map[int]struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppsTokenAPI) ListRepos(arg1 context.Context, arg2 *github.ListOptions) ([]*github.Repository, *github.Response, error) {
	fake.listReposMutex.Lock()
	ret, specificReturn := fake.listReposReturnsOnCall[len(fake.listReposArgsForCall)]
	fake.listReposArgsForCall = append(fake.listReposArgsForCall, struct {
		arg1 context.Context
		arg2 *github.ListOptions
	}{arg1, arg2})
	fake.recordInvocation("ListRepos", []interface{}{arg1, arg2})
	fake.listReposMutex.Unlock()
	if fake.ListReposStub != nil {
		return fake.ListReposStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	fakeReturns := fake.listReposReturns
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAppsTokenAPI) ListReposCallCount() int {
	fake.listReposMutex.RLock()
	defer fake.listReposMutex.RUnlock()
	return len(fake.listReposArgsForCall)
}

func (fake *FakeAppsTokenAPI) ListReposCalls(stub func(context.Context, *github.ListOptions) ([]*github.Repository, *github.Response, error)) {
	fake.listReposMutex.Lock()
	defer fake.listReposMutex.Unlock()
	fake.ListReposStub = stub
}

func (fake *FakeAppsTokenAPI) ListReposArgsForCall(i int) (context.Context, *github.ListOptions) {
	fake.listReposMutex.RLock()
	defer fake.listReposMutex.RUnlock()
	argsForCall := fake.listReposArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppsTokenAPI) ListReposReturns(result1 []*github.Repository, result2 *github.Response, result3 error) {
	fake.listReposMutex.Lock()
	defer fake.listReposMutex.Unlock()
	fake.ListReposStub = nil
	fake.listReposReturns = struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppsTokenAPI) ListReposReturnsOnCall(i int, result1 []*github.Repository, result2 *github.Response, result3 error) {
	fake.listReposMutex.Lock()
	defer fake.listReposMutex.Unlock()
	fake.ListReposStub = nil
	if fake.listReposReturnsOnCall == nil {
		fake.listReposReturnsOnCall = make(map[int]struct {
			result1 []*github.Repository
			result2 *github.Response
			result3 error
		})
	}
	fake.listReposReturnsOnCall[i] = struct {
		result1 []*github.Repository
		result2 *github.Response
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAppsTokenAPI) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.listReposMutex.RLock()
	defer fake.listReposMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppsTokenAPI) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ githubapp.AppsTokenAPI = new(FakeAppsTokenAPI)
